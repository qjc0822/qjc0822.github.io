<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Firstblog</title>
    <url>/2021/05/06/Firstblog/</url>
    <content><![CDATA[<h1 id="欢迎来到这里"><a href="#欢迎来到这里" class="headerlink" title="欢迎来到这里"></a>欢迎来到这里</h1><p>欢迎来到FocoL的展示架，如你所见本人将会在这里更新一些奇奇怪怪的东西，包括但不限于</p>
<h3 id="图形学作业"><a href="#图形学作业" class="headerlink" title="图形学作业"></a>图形学作业</h3><h3 id="虚幻4作品"><a href="#虚幻4作品" class="headerlink" title="虚幻4作品"></a>虚幻4作品</h3><h3 id="游戏评测和体验"><a href="#游戏评测和体验" class="headerlink" title="游戏评测和体验"></a>游戏评测和体验</h3><h3 id="哲学哲♂学漫谈"><a href="#哲学哲♂学漫谈" class="headerlink" title="哲学哲♂学漫谈"></a>哲学<del>哲♂学</del>漫谈</h3><h3 id="自己写的小故事"><a href="#自己写的小故事" class="headerlink" title="自己写的小故事"></a>自己写的小故事</h3><h3 id="键政暴论"><a href="#键政暴论" class="headerlink" title="键政暴论"></a><del>键政暴论</del></h3><h3 id="以及其它的我没想到的东西"><a href="#以及其它的我没想到的东西" class="headerlink" title="以及其它的我没想到的东西"></a>以及其它的我没想到的东西</h3><p>总之就是什么都会有，欢迎大家来玩<del>顺便脑内喷我</del></p>
<p>评论功能和桌宠预计很快就会实装，到时候可以来调戏桌宠（<del>谁想看大男人发牢骚</del></p>
<p>祝你武运昌隆，El Psy Congroo~~</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>欢迎</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202笔记——Real-time-Environment-mapping(2)</title>
    <url>/2021/05/14/Games202%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Real-time-Environment-mapping-2/</url>
    <content><![CDATA[<h1 id="环境光照的阴影计算"><a href="#环境光照的阴影计算" class="headerlink" title="环境光照的阴影计算"></a>环境光照的阴影计算</h1><p><del>首先，最High level的答案是不知道怎么做</del></p>
<p>总归这个事情是非常非常困难的，环境光是四面八方过来的光，你难道把每个点都视为点光源或面光源吗(many-light problem)</p>
<p>还有一个思路就是采样，但众所周知采样也不是什么好方法，关键是我们很难获得一个着色点的visibility term，不知道该怎么采样，盲目的采样那就更慢了</p>
<p>如果我们想要用上一节的拆分方法，也就是这个玩意</p>
<script type="math/tex; mode=display">
\int_{\Omega}^{}f(x)g(x)\text{d}x \approx \cfrac{\int_{\Omega}^{}f(x)\text{d}x}{\int_{\Omega}^{}\text{d}x}·\int_{\Omega}^{}g(x)\text{d}x</script><p>在<strong>积分域小，g(x)足够光滑</strong>时，我们可以做如上拆分，但是假如你的BRDF是glossy的，那么就会有多次跳变，频率也会很高。同时积分域还是接收光照的整个上半球，可以发现我们并不能继续用这种拆分方法。</p>
<p> 工业界对这个问题的近似方法非常的暴力：你总会有一个或几个最主要的光源（例如太阳），我根据这几个光源生成阴影就好了 </p>
<p>如果真的要解决的话，下面要讲的PRT是一种很不错的解决方案，它是一种可以得到非常准确的环境光照阴影的方法</p>
<p>以及光追<del>永远滴神</del></p>
<h1 id="球面谐波函数-Spherical-Harmonics-SH"><a href="#球面谐波函数-Spherical-Harmonics-SH" class="headerlink" title="球面谐波函数(Spherical Harmonics,SH)"></a>球面谐波函数(Spherical Harmonics,SH)</h1><h2 id="前置的数学知识"><a href="#前置的数学知识" class="headerlink" title="前置的数学知识"></a>前置的数学知识</h2><p>根据我们高数学习的知识，任意一个函数可以用傅里叶级数逼近，即写成一个常数和若干sin和cos项的线性组合，其中每项我们将其称为一个<strong>基函数</strong>，那么我们也可以说，一个函数可以写成一系列基函数的线性组合</p>
<p>基函数性质可以写成如下公式</p>
<script type="math/tex; mode=display">
f(x)=\sum_i{c_i·B_i(x)}</script><p>其中$B_i(x)$为第i个基函数</p>
<p>对于一个空间上的函数，如果在这个函数覆盖到的空间中，函数值变化非常剧烈，我们可以认为这个函数频率很高，反之则比较低，如下图所示</p>
<p><img src="../images/image-20210514153342149.png" alt="image-20210514153342149"></p>
<p>左图的人像中，头发的位置变化非常频繁且剧烈，频率较高，而背景和衣服部分频率较低，我们可以获得这个图像的频域上所显示的内容，即为频谱，如右图所示。频谱中间四个明显高的spike是由于频谱识别的时候会默认将图像在U和V方向上平铺，在平铺的交界会产生巨大的变化，频率很高。</p>
<p>如果我们在频域上留下低频的部分，去掉高频的部分，就会使图像的变化不太明显，看起来像整个图像被模糊了一样，如下图所示</p>
<p><img src="../images/image-20210514153823413.png" alt="image-20210514153823413"></p>
<p>滤波(filtering)的意思就是在图像频域上去掉特定范围的内容。上图就是低通滤波的一个例子</p>
<p>另外，在图形学上的卷积和平均是同一个意思，而卷积实际上也可以·看作一种滤波，如下图</p>
<p><img src="../images/image-20210514154111345.png" alt="image-20210514154111345"></p>
<p>卷积的数学表示是如下形式</p>
<script type="math/tex; mode=display">
\int_{\Omega}{f(x)g(x)dx}</script><p>按照上述定义我们可以扩展概念，认为图形学中对两个函数的乘积进行积分的形式就是图形学中的卷积。同样的，我们认为这种形式存在一定的滤波意义</p>
<h2 id="球面谐波函数的定义"><a href="#球面谐波函数的定义" class="headerlink" title="球面谐波函数的定义"></a>球面谐波函数的定义</h2><p>球面谐波函数是一系列二维的基函数，这个系列中每一个函数都是定义在球面上的，可以理解为每一个函数都是对方向的函数，对于三维空间中不同的一个二维方向（用$\theta$,$\phi$表示），该函数都对应一个值。每一个SH都是一个独特的函数</p>
<p>和傅里叶级数的基函数非常相似的是，SH也有不同频率的函数，且不同频率所对应的函数个数不同，具体如图所示<del>并看不懂为什么是这样子</del></p>
<p><img src="../images/image-20210514155651097.png" alt="image-20210514155651097"></p>
<p>上图是对SH的可视化，颜色代表正负，可以看见，对于第L阶，有2L+1个SH，编号从-L到L</p>
<p>每一个SH关联了一个勒让德多项式（Legendre polynomial），数学上是非常复杂的，但我们并不需要理解这个多项式，我们只需要知道一个SH可以用数学方式定义，同时SH的线性组合可以用来描述球面上函数的性质即可</p>
<p>球面谐波函数是正交的，且球面谐波函数基函数发生旋转都可以用同阶函数的线性组合表示</p>
<h2 id="球面谐波函数在环境光照中的使用"><a href="#球面谐波函数在环境光照中的使用" class="headerlink" title="球面谐波函数在环境光照中的使用"></a>球面谐波函数在环境光照中的使用</h2><p>对于一个球面函数，我们如果想要得出对应的SH的系数，可以做如下操作</p>
<script type="math/tex; mode=display">
c_i=\int_{\Omega}{f(\omega)B_i(\omega)d\omega}</script><p>其中$\Omega$为球面，$\omega$为球面上的一个方向。$f(\omega)$是这个函数本身，求这个系数的过程在数学上定义叫做<strong>投影</strong>， 投影的过程便被我们写成了一个卷积的形式。</p>
<p>因为级数是无限的，我们不可能真的用无穷级数取逼近原函数，通常只会用低阶的SH去还原原函数，相当于对原函数做了低通滤波。</p>
<p>不难发现环境光就是一个定义在球面上，不同的方向有不同的值的函数，因此我们可以用SH还原环境光。</p>
<p>根据上节课对环境光采样的结果，我们可以得出一个结论：</p>
<p><strong>先滤波+一次采样=不滤波+多次采样</strong></p>
<p>全局光照问题在BRDF diffuse的时候可以说是相对做了简化的，回顾渲染方程</p>
<script type="math/tex; mode=display">
L_o(p,\omega_o)=\int_{\Omega+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\cos{\theta_i}d\omega_i</script><p>其中$L_i(p,\omega_i)$是环境光，不难发现这相当于将环境光与BRDF做了卷积，如果BRDF即$f_r(p,\omega_i,\omega_o)$是diffuse的，那么相当于对环境光项做了低通滤波。</p>
<p>在这种条件下，我们观察到，大概我们只需要三阶SH就可以很好的还原环境光，从三阶开始系数$c_i$几乎是0</p>
<p>那么用这种方法如何解决阴影呢？</p>
<h1 id="PRT-Precomputed-Radiance-Transfer"><a href="#PRT-Precomputed-Radiance-Transfer" class="headerlink" title="PRT(Precomputed Radiance Transfer)"></a>PRT(Precomputed Radiance Transfer)</h1><p>回到渲染方程来</p>
<script type="math/tex; mode=display">
L_o(p,\omega_o)=\int_{\Omega+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\cos{\theta_i}V(p,\omega_i)d\omega_i</script><p>我们如果想要算渲染方程，最简单的方法自然是对于每个对应的像素都乘起来，然后做积分，计算量可想而知的大</p>
<p>不难发现，除了$L_i(p,\omega_i)$以及BRDF本身是球面函数之外，$V(p,\omega_i)$也是在不同的方向上定义有不同的值，也是球面函数</p>
<p>PRT的基本思想是：<strong>假设渲染过程中场景内其余物体不变，只有光照会发生变化</strong>，因此我们把渲染方程看成两部分，$L_i(p,\omega_i)$是负责光照的那一部分，其余的$f_r(p,\omega_i,\omega_o)\cos{\theta_i}V(p,\omega_i)$和光照并没有什么关系，记为light transport部分。</p>
<p>可以发现light transport是和光照无关的，被渲染物体本身的性质，那么我们也许可以先完成这部分的预计算。不难发现，light transport项对于一个确定的点p仍然是一个球面函数。</p>
<p>如果BRDF是diffuse的，我们可以认为BRDF是一个常值，直接把BRDF项拿出来记作$\rho$，则上式可以被我们写成如下形式</p>
<script type="math/tex; mode=display">
L_o(p,\omega_o)=\rho\int_{\Omega+}L_i(p,\omega_i)\cos{\theta_i}V(p,\omega_i)d\omega_i</script><p>我们把光照写成用SH表示的形式，即</p>
<script type="math/tex; mode=display">
L_i(\omega_i)=\sum{c_i·B_i(\omega_i)}</script><p>这里我们认为是对于一个确定的点p，即点p是常值。</p>
<p>那么渲染方程可以进一步化简为</p>
<script type="math/tex; mode=display">
L_o(\omega_o)=\rho\sum c_i\int_{\Omega+}B_i(\omega_i)\cos{\theta_i}V(\omega_i)d\omega_i</script><p>在PRT场合之中<strong>一定可以</strong>交换积分与求和的顺序，因此我们发现积分项是一个球面函数向SH基函数投影的形式，这部分完全可以预计算。因此渲染方程的最终形式为</p>
<script type="math/tex; mode=display">
L_o(\omega_o)\approx\rho\sum c_iT_i</script><p>可以发现求和项就是对两个向量的点乘</p>
<p>SH有一个性质，就是如果我对原函数进行一个旋转，很快的就能算出旋转后SH对应的系数。也就是说环境光是可以旋转的，但是<strong>场景中的物件不能移动</strong></p>
<p>至于BRDF不是diffuse该如何解决，下节课讲<del>ylq摸了</del></p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202笔记——Real-time-Environment-mapping(1)</title>
    <url>/2021/05/12/Games202%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Real-time-Environment-mapping(1)/</url>
    <content><![CDATA[<h1 id="关于shadow的补充"><a href="#关于shadow的补充" class="headerlink" title="关于shadow的补充"></a>关于shadow的补充</h1><h2 id="Distance-Field-Soft-Shadow"><a href="#Distance-Field-Soft-Shadow" class="headerlink" title="Distance Field Soft Shadow"></a>Distance Field Soft Shadow</h2><h3 id="Distance-Functions-Signed-Distance-Field-SDF"><a href="#Distance-Functions-Signed-Distance-Field-SDF" class="headerlink" title="Distance Functions/(Signed)Distance Field(SDF)"></a>Distance Functions/(Signed)Distance Field(SDF)</h3><p>定义了空间中一点到物体表面的最小距离</p>
<p>可能被规定为带正负号的，即到一个表面的<strong>有向(signed)距离</strong></p>
<p>不同物体的SDF混合后可以产生平滑的过度，是SDF一个非常好的性质</p>
<p>下图是一个可视化的SDF</p>
<p><img src="../images/image-20210512173710432.png" alt="image-20210512173710432"></p>
<h4 id="SDF的应用"><a href="#SDF的应用" class="headerlink" title="SDF的应用"></a>SDF的应用</h4><p>1.Sphere tracing</p>
<p>​    对于在SDF上进行的ray tracing，一个很简单的实现方式是sphere tracing，实现方法如下</p>
<p>​    对于ray上一点P</p>
<p>​        1.求得SDF(P)</p>
<p>​        2.沿着射线方向移动SDF(P)的距离到达P’</p>
<p>​        3.对于P’,回到第一步操作直到接触到物体表面（SDF(P)=0）</p>
<p><img src="../images/image-20210512171559692.png" alt="image-20210512171559692"></p>
<p>2.计算软阴影</p>
<p>通过SDF我们可以获得一个不会被遮挡的“安全角度”，原理如图所示</p>
<p><img src="../images/image-20210512172136691.png" alt="image-20210512172136691"></p>
<p>如果安全角度比较小，我们可以认为该点对于光源的可视度低</p>
<p>计算安全角度的方法：对于每次sphere tracing的结果，记录SDF(P)的最小值和最小值对应的点P‘，则安全角度$\theta$对应的公式为</p>
<script type="math/tex; mode=display">
\theta=\arcsin(\cfrac{SDF(P')}{|P'-O|})</script><p>我们自然可以这样计算，但反三角函数计算量非常大，实时渲染中应尽量避免这种运算，所以我们可以进行如下简化</p>
<script type="math/tex; mode=display">
Visiblity=min\{k·\cfrac{SDF(P')}{|P'-O|},1.0\}</script><p>这样可以一步得出可视度，注意到可视度并不会大于1.0，也就是说$k·\cfrac{SDF(P’)}{|P’-O|}$大于1的部分并没有任何作用，不难看出k的变大会使得大于1的部分变多，从而使软阴影渐变的范围变小，提升阴影的硬度。</p>
<h3 id="距离场软阴影的特点"><a href="#距离场软阴影的特点" class="headerlink" title="距离场软阴影的特点"></a>距离场软阴影的特点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>快速</p>
<p>质量不低</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>需要预计算</p>
<p>对存储有重度需求（三维的SDF）</p>
<p>SDF存在各种Artifact（瑕疵？还是怎么翻译？）</p>
<h1 id="环境光的着色"><a href="#环境光的着色" class="headerlink" title="环境光的着色"></a>环境光的着色</h1><h2 id="简单回顾环境光照"><a href="#简单回顾环境光照" class="headerlink" title="简单回顾环境光照"></a>简单回顾环境光照</h2><p>用一张图记录环境中的光照信息</p>
<p>默认所有的光都是来自无限远的</p>
<h2 id="IBL-Image-Based-Lighting"><a href="#IBL-Image-Based-Lighting" class="headerlink" title="IBL(Image-Based Lighting)"></a>IBL(Image-Based Lighting)</h2><p>对于处于环境光照下的物体，我们如何给这个物体上的每一个点着色呢？</p>
<p>一说起着色，我们自然就会想到渲染方程</p>
<script type="math/tex; mode=display">
L_o(p,\omega_o)=\int_{\Omega+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\cos{\theta_i}V(p,\omega_i)d\omega_i</script><p>环境光照下并不考虑visibility项，因此正确的渲染方程为</p>
<script type="math/tex; mode=display">
L_o(p,\omega_o)=\int_{\Omega+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\cos{\theta_i}d\omega_i</script><p>计算机该如何解上述的方程？Games101讲过的蒙特卡洛积分就是对上述方程积分的一个无偏估计。</p>
<p>然而蒙特卡洛积分需要大量的采样，如果对于每一个点都需要应用一次蒙特卡洛积分，这个方法将慢到爆炸，现在基于降噪，采样复用等等技术，这个方法也变得逐渐可用，但本着能不采样就不采样的原则，我们引入如下方法</p>
<h3 id="The-Split-Sum"><a href="#The-Split-Sum" class="headerlink" title="The Split Sum"></a>The Split Sum</h3><p>我们观察到如果这个物体的BRDF是glossy的(类似镜面反射)，那么对于一个观察的视角，只需要计算一个很小的积分域，如果BRDF是diffuse的（漫反射），那么它的BRDF就会比较光滑，如图所示，下图中左边为glossy的BRDF，右边为diffuse的BRDF</p>
<p><img src="../images/image-20210512180127816.png" alt="image-20210512180127816"></p>
<p>还记得上一节课讲到的实时渲染的近似相等吗？</p>
<script type="math/tex; mode=display">
\int_{\Omega}^{}f(x)g(x)\text{d}x \approx \cfrac{\int_{\Omega}^{}f(x)\text{d}x}{\int_{\Omega}^{}\text{d}x}·\int_{\Omega}^{}g(x)\text{d}x</script><p>上式在<strong>积分域小，g(x)足够光滑</strong>时足够准确</p>
<p>可以发现我们的BRDF完美符合了如上条件，所以渲染方程可以被我们拆解为</p>
<script type="math/tex; mode=display">
L_o(p,\omega_o)\approx\cfrac{\int_{\Omega_{fr}}L_i(p,\omega_i)d\omega_i}{\int_{\Omega_{fr}}d\omega_i}·\int_{\Omega_+}{f_r(p,\omega_i,\omega_o)\cos(\theta_i)d\omega_i}</script><p><del>看着就头疼</del></p>
<p>莫慌，先看环境光</p>
<h4 id="对于环境光项的处理"><a href="#对于环境光项的处理" class="headerlink" title="对于环境光项的处理"></a>对于环境光项的处理</h4><p>注意乘号前面的项，在我们拆出来的两部分中，这项包含了入射光项，我们把它在BRDF所覆盖的范围内积分并取平均，实际上表示我们<strong>模糊</strong>了作为入射光的环境光贴图，所以实际上我们完全可以提前对环境光贴图进行滤波（可以理解为模糊），更进一步的，我们可以先给环境光贴图做不同强度的模糊，在需要的时候直接查询，这与MIPMAP非常相似</p>
<p>现在前面一半被我们解决了，那后面一半的积分呢？</p>
<p>按照上述的想法，我们好像也可以对这个BRDF做预计算，但是这种预计算实在太浩大了（菲涅尔项，粗糙度等等一堆东西），还是很慢</p>
<p>但是预计算还是要预计算的，维数太多就只能降维估计近似这样子</p>
<p><del>接下来基本没太懂照搬原话警告</del></p>
<h4 id="对于BRDF的处理"><a href="#对于BRDF的处理" class="headerlink" title="对于BRDF的处理"></a>对于BRDF的处理</h4><p>首先我们回顾一下Microfacet BRDF（微表面BRDF）</p>
<p>对于一个点p，入射方向i，出射方向o，我们可以把BRDF写成如下形式</p>
<script type="math/tex; mode=display">
f(i,o)=\cfrac{F(i,h)G(i,o,h)D(h)}{4(n,i)(n,o)}</script><p>其中F为菲涅尔项，决定了从不同角度观察材质有多少能量被反射，G为阴影遮蔽项，D为微表面法线分布，h为半程向量（（入射向量+出射向量）/2），其中比较重要的是F和D，我们重点考虑</p>
<p>先看菲涅尔项F，这是一个十分复杂的函数，但是有一个近似方法可以很好的近似菲涅尔项，即Schlick’s approximation，根据这种近似，我们有</p>
<script type="math/tex; mode=display">
R(\theta)=R_0+(1-R_0)(1-\cos{\theta})^5</script><p>$R_0$为物体的基础反射率</p>
<p>关于物体的法线，我们以贝克曼分布（Beckmann distribution）为例，公式如下</p>
<script type="math/tex; mode=display">
D(h)=\cfrac{e^{-\cfrac{\tan^{2}{\theta_h}}{\alpha^2}}}{\pi\alpha^2\cos^{4}{\theta_h}}</script><p><del>说实话没太看懂但是知道有这么个分布就得了</del></p>
<p><del>ylq原话：非常简单的一个一维的分布</del></p>
<p>其中$\alpha$代表了物体表面的粗糙度，$\theta_h$表示半程向量h和法线的夹角，我们可以用各种代换把她变成跟入射方向有关的角度，也就是说，菲涅尔项中的$\theta$和法线分布中的$\theta_h$并不是两个互不相关的未知数，而是可以用一个未知数同时表示的两个项。</p>
<p>这样BRDF就被我们降维到了三个维度：$R_0$，$\alpha$和$\theta$</p>
<p>三维还是高了一点，能不能再拆一个变量出去呢？</p>
<p>人们发现<del>别问我怎么发现的</del>当我们用Schlick’s approximation表示菲涅尔项后，BRDF还可以被近似成如下的形式：</p>
<script type="math/tex; mode=display">
\int_{\Omega_+}{f_r(p,\omega_i,\omega_o)\cos(\theta_i)d\omega_i}\approx R_0\int_{\Omega_+}{\cfrac{f_r}{F}(1-(1-\cos{\theta_i})^5)\cos(\theta_i)d\omega_i}+\\
\int_{\Omega_+}{\cfrac{f_r}{F}(1-\cos{\theta_i})^5\cos(\theta_i)d\omega_i}</script><p><del>生怕我学会的式子</del></p>
<p>不过看不懂这个式子其实问题不大，本质是公式的整理，关键是现在我们把$R_0$从积分中拆出去了，积分里只剩下两个变量了！</p>
<p>这样我们就可以放心大胆的预计算了，我们可以根据每一个$\alpha$和$\theta$算一遍结果，把结果打印在一张表上，对于图形学来说就是一张2D的texture，前后两部分积分各打一张tex，效果如下</p>
<p><img src="../images/image-20210512191536843.png" alt="image-20210512191536843"></p>
<p>这样我们就解决了<del>（就？）</del>环境光的渲染问题</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202笔记——Real-time Shadows</title>
    <url>/2021/05/08/Games202%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Real-time-Shadows/</url>
    <content><![CDATA[<p>这节课主要是关于光栅化软阴影的算法<del>光追扎布多德勒</del></p>
<h1 id="关于shadow-mapping的回顾"><a href="#关于shadow-mapping的回顾" class="headerlink" title="关于shadow mapping的回顾"></a>关于shadow mapping的回顾</h1><h2 id="shadow-mapping的步骤"><a href="#shadow-mapping的步骤" class="headerlink" title="shadow mapping的步骤"></a>shadow mapping的步骤</h2><h3 id="1-生成shadow-map"><a href="#1-生成shadow-map" class="headerlink" title="1.生成shadow map"></a>1.生成shadow map</h3><p>从光源方向看向场景，测量场景最浅的的深度，记录成为shadow map（SM）</p>
<h3 id="2-检测阴影"><a href="#2-检测阴影" class="headerlink" title="2.检测阴影"></a>2.检测阴影</h3><p>从相机方向，结合SM判断场景是否在阴影里</p>
<h2 id="shadow-mapping的问题"><a href="#shadow-mapping的问题" class="headerlink" title="shadow mapping的问题"></a>shadow mapping的问题</h2><h3 id="self-occlusion"><a href="#self-occlusion" class="headerlink" title="self occlusion"></a>self occlusion</h3><p>因为shadow map 的精度，每个像素记录的深度为常数，使得深度被离散化产生的问题</p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>1.加入一个bias，可以根据情况调整（工业界常用）</p>
<p>2.second-depth shadow mapping</p>
<p>​    不但储存最小深度，还储存次小深度，对两个深度取中点作为深度储存。</p>
<p>​    <del>听起来很美好但限制太多了又慢根本没人用</del></p>
<p>​    此外，这个方法要进行两次深度查询，虽然渐近时间复杂度都是O(n)但是<strong>实时渲染不相信复杂度</strong></p>
<h3 id="走样"><a href="#走样" class="headerlink" title="走样"></a>走样</h3><p>同样是因为shadow map的精度问题，投射的阴影有锯齿</p>
<h1 id="实时渲染中的近似相等"><a href="#实时渲染中的近似相等" class="headerlink" title="实时渲染中的近似相等"></a>实时渲染中的近似相等</h1><script type="math/tex; mode=display">
\int_{\Omega}^{}f(x)g(x)\text{d}x \approx \cfrac{\int_{\Omega}^{}f(x)\text{d}x}{\int_{\Omega}^{}\text{d}x}·\int_{\Omega}^{}g(x)\text{d}x</script><p>上式在<strong>积分域小，g(x)足够光滑</strong>时足够准确<del>别问我为什么我不知道我恨数学</del></p>
<p>依照上式，渲染方程</p>
<script type="math/tex; mode=display">
L_o(p,\omega_o)=\int_{\Omega+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\cos{\theta_i}V(p,\omega_i)d\omega_i</script><p>可被近似为</p>
<script type="math/tex; mode=display">
L_o(p,\omega_o) \approx \cfrac{\int_{\Omega+}V(p,\omega_i)d\omega_i}{\int_{\Omega+}d\omega_i}\int_{\Omega+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\cos{\theta_i}d\omega_i</script><p>此式子将会在环境光遮蔽时被使用</p>
<h1 id="PCSS-Percentage-Closer-Soft-Shadows"><a href="#PCSS-Percentage-Closer-Soft-Shadows" class="headerlink" title="PCSS(Percentage Closer Soft Shadows)"></a>PCSS(Percentage Closer Soft Shadows)</h1><p>传统的shadow mapping方法只能得到硬阴影，但在现实世界中更加常见的是软阴影，PCSS就是一种获得软阴影的方法</p>
<h2 id="PCF-Percentage-Closer-Filtering"><a href="#PCF-Percentage-Closer-Filtering" class="headerlink" title="PCF(Percentage Closer Filtering)"></a>PCF(Percentage Closer Filtering)</h2><p>最开始开发出来是为了做阴影的反走样（抗锯齿），但PCSS用这种方法做反走样</p>
<h3 id="PCF的作用原理"><a href="#PCF的作用原理" class="headerlink" title="PCF的作用原理"></a>PCF的作用原理</h3><p>首先，<strong>PCF不是对SM求平均，模糊SM，也不是直接对生成完毕后的阴影结果做模糊</strong></p>
<p>对于一个shading point p，在SM上查找其深度时，不止查找p点本身在SM上对应的深度，还查找p点及其周围像素对应的深度值，并与p点对应的值做比较，周围的像素在上述比较过后可以产生两种结果，要么挡得住p点（深度小于p点），要么挡不住p点（深度大于p点），然后对此结果做filter，以此为依据决定阴影的强度</p>
<p>可以看见，当我把这个filter的范围取的比较大的时候，就可以用PCF近似出软阴影的效果了</p>
<h3 id="PCSS中的PCF"><a href="#PCSS中的PCF" class="headerlink" title="PCSS中的PCF"></a>PCSS中的PCF</h3><p>那么，我们应该给一个多大的filter，filter的大小必须要是固定的吗？</p>
<p>显然并不是的，对于不同的<strong>遮挡物到阴影</strong>的距离，要给不同大小的filter，这也很好理解，月食不一定能把太阳全部挡住，但你的手可以</p>
<p>更准确的说法，filter size和相对的，平均的，投射的遮挡物深度有关(relative average projected blocker depth)<del>说人话</del></p>
<script type="math/tex; mode=display">
w_{penumbra}=(d_{receiver}-d_{Blocker})·w_{Light}/d_{Blocker}</script><p><img src="../images/image-20210508172429519.png" alt="image-20210508172429519"></p>
<p>从上图可以看到其实就是个简单的相似三角形关系，图来自Games202原视频</p>
<h2 id="PCSS算法全过程"><a href="#PCSS算法全过程" class="headerlink" title="PCSS算法全过程"></a>PCSS算法全过程</h2><p>对于面光源无法生成SM的问题：将面光源看作点光源（例如放在面光源中心的点光源）去生成SM</p>
<p>对于一个shading point p：</p>
<p>1.记录p点周围所有<strong>可以遮挡住p点</strong>的像素（Blocker）的平均深度$d_{Blocker}$</p>
<p>2.根据$d_{Blocker}$求得$w_{penumbra}$</p>
<p>3.PCF</p>
<p> 在PCSS中，我们可以用如下式子表示PCF算法</p>
<script type="math/tex; mode=display">
V(x)=\sum_{y\in\Nu(x)}w(x,y)·\chi^+[D_{SM}-D{scene}(x)]</script><p>其中$\chi^+()$为符号函数，其中变量大于0函数值为1，反之为0,w为权值</p>
<p>关于取得$d_{Blocker}$时所查询的范围大小，第一可以用一个常数大小（比如5x5）</p>
<p>除此之外还有一个更好的方法，见图</p>
<p><img src="../images/image-20210508174819794.png" alt="image-20210508174819794"></p>
<p>这样这个套娃问题就解决啦</p>
<h2 id="PCSS的问题"><a href="#PCSS的问题" class="headerlink" title="PCSS的问题"></a>PCSS的问题</h2><p>开销非常，非常，非常，恐怖</p>
<p>想象一下，对于一个点p，假如PCF的filter范围是5x5，第一步找$d_{Blocker}$的范围也是5x5，一来一去五十次采样，50倍开销，这么压榨电脑，这要是个ai，你就    等着智械危机吧。</p>
<p>不难看出，多次采样就是变慢的元凶，而采样主要发生在第一步和第三步，那么有没有方法减少采样次数，加速PCSS呢？</p>
<p>1.稀疏采样</p>
<p>​    工业界有在用，但是会导致噪声，目前有先稀疏采样再降噪的做法</p>
<p>2.全新的软阴影生成方法：VSSM</p>
<h1 id="VSSM-Variance-Soft-Shadow-Mapping"><a href="#VSSM-Variance-Soft-Shadow-Mapping" class="headerlink" title="VSSM(Variance Soft Shadow Mapping)"></a>VSSM(Variance Soft Shadow Mapping)</h1><h2 id="VSSM解决PCF"><a href="#VSSM解决PCF" class="headerlink" title="VSSM解决PCF"></a>VSSM解决PCF</h2><p>此方法针对性的解决PCSS第一步和第三步慢的问题</p>
<p>我们在PCF这一步想要知道周围像素是否遮挡的加权平均，不难看出，如果在不加权的情况下，这个问题其实等价于求周围像素遮挡的个数除以总个数，那不就是周围像素遮挡的概率嘛！</p>
<p>换句话说，我们只要能够估计周围像素遮挡着色点的概率，我们就可以在不知道周围像素具体情况（不采样）的情况下实现PCF算法。</p>
<p>我们直接暴力的认为周围采样点的深度的分布是符合正态分布的，那么我们如何估算出这么一个正态分布呢？熟悉<del>个屁</del>概率论的良好大学生很快就能反应过来了：我们需要掌握周围采样点的信息只有两个：均值和方差。</p>
<p>首先是平均值，给你一张图，我问你要一个范围内的平均值，在图形学课程中我们能想到什么？</p>
<p>这玩意不就是MIPMAP嘛</p>
<p>除了MIPMAP，我们还有一种更精准的方法叫做SAT(Summed Area Tables)，实现原理是简单的前缀和，SAT的介绍写在后面了</p>
<p>我们可以知道的就是我们很轻松的就可以知道它的平均值，现在平均值有了，那么方差呢？</p>
<p>接下来请出我们的一个刻在DNA里的经典公式<del>概率论双杀</del></p>
<script type="math/tex; mode=display">
Var(X)=E(X^2)-E^2(X)</script><p>直接拿下</p>
<p>这样我们只需要在缓存SM的同时再缓存一张记录了深度平方的SM就搞定了</p>
<p>现在我们已经可以估计出一个正态分布了，这时候其实我们想要知道的是这个正态分布曲线下面围成的面积，也就是那个熟悉的$P(X&gt; x)$</p>
<p>学过概率论的你估计有反应过来了：这不是那个著名的不等式吗？</p>
<p>没错，隆重请出切比雪夫（chebychev）不等式</p>
<script type="math/tex; mode=display">
P(X>t) \leq \cfrac{\sigma^2}{\sigma^2+(t-\mu)^2}</script><p>到现在就可以摊牌了，正态分布只是方便理解，真正要用到的就是上面这个切比雪夫不等式</p>
<p>虽然这里不是等于，是小于等于，但是实时渲染充满了近似，我们可以近似的认为有</p>
<script type="math/tex; mode=display">
P(X>t) = \cfrac{\sigma^2}{\sigma^2+(t-\mu)^2}</script><p>尽管切比雪夫不等式其实有很多的限制都没有考虑，但是这很好用，也很快，误差也尚可接受，所以实时渲染里我们可以用这种方法</p>
<h2 id="VSSM解决Blocker-Search"><a href="#VSSM解决Blocker-Search" class="headerlink" title="VSSM解决Blocker Search"></a>VSSM解决Blocker Search</h2><p>以上我们解决了第三步PCF的多次采样问题，那么第一步Blocker search呢？</p>
<p>一次采样的点之中有且仅有两种情况：这个点可以算作Blocker，以及这个点不能算作Blocker</p>
<p>我们记总采样个数$N$，Blocker的平均深度为$z_{occ}$，个数为$N_1$，非Blocker的深度为$z_{unocc}$，个数为$N_2$,平均深度为$z_{avg}$</p>
<p>则很容易看出来对于任意情况总有</p>
<script type="math/tex; mode=display">
\cfrac{N_1}{N}z_{occ}+\cfrac{N_2}{N}z_{unocc}=z_{avg}</script><p>我们不难看出$\cfrac{N_2}{N}=P(x&gt;t)$，又可以愉快的切比雪夫了</p>
<p>现在我们知道了$\cfrac{N_2}{N}$，$\cfrac{N_1}{N}=1-\cfrac{N_2}{N}$以及直接从MIPMAP或SAT获得的$z_{avg}$，想要解出$z_{occ}$，但我们还有一个变量不知道：$z_{unocc}$</p>
<p>这里就又是大胆假设出场的时机了：我们直接假设$z_{unocc}=t$，没想到吧</p>
<p>其实是因为绝大部分阴影接收者是个平面，所以这么假设问题不大<del>（你妹啊斜的平面咋办啊？）</del></p>
<p>总之现在我们也就把这个问题解决了，撒花</p>
<h2 id="SAT-Summed-Area-Table"><a href="#SAT-Summed-Area-Table" class="headerlink" title="SAT(Summed Area Table)"></a>SAT(Summed Area Table)</h2><p>这里插播一个之间就提到的，比MIPMAP精确且可以适应长方形查询平均值的技术：SAT</p>
<p>前面已经说到了SAT是一个基于前缀和的算法，这里放张图大家感受一下什么是前缀和</p>
<p><img src="../images/image-20210508210011660.png" alt="image-20210508210011660"></p>
<p>可以看到SAT的第n项实际上就是把原输入前面的n项加起来，当我们要求m到n项之间的和的时候，只需要用SAT的第n项减去第m-1项就好了，这种预处理的方法快速便捷无误差。</p>
<p>拓展到二维也是一样，我们只需要在预处理生成SAT的时候把1D时的加左方一项改成加上方一项和左方一项，求[a,b]到[x,y]之间的和的时候只需要做如下的操作即可，具体看图</p>
<p><img src="../images/image-20210508210856542.png" alt="image-20210508210856542"></p>
<h2 id="VSSM结尾"><a href="#VSSM结尾" class="headerlink" title="VSSM结尾"></a>VSSM结尾</h2><p>虽然VSSM很牛逼，但是业界还就那个逐渐没人用</p>
<p>主要是因为各种降噪手段都出来了，空间域和时间域双管齐下，导致稀疏采样的PCSS逐渐的好起来了，这么多近似的VSSM用的人就少了</p>
<p>但是这个算法是真的牛逼啊，这就是我学概率论的意义吗（</p>
<p><del>话是这么说但根本没好好学概率论</del></p>
<h1 id="Moment-Shadow-Mapping"><a href="#Moment-Shadow-Mapping" class="headerlink" title="Moment Shadow Mapping"></a>Moment Shadow Mapping</h1><p>由于VSSM做出了太多的近似，容易<del>被出题人出数据卡掉</del>在某些环境下不准确</p>
<p>举个例子，如果在切比雪夫估计遮挡率的环节你估计遮挡率低了，阴影就会偏白并发生漏光现象，偏黑也就算了，偏白是绝对不能忍受的</p>
<p>另外当接收物不是平面的时候也会出现问题，参见Blocker search的近似</p>
<p>MSM主要是为了解决VSSM估计分布不准的问题</p>
<p>如果我告诉你Moment在这里是“矩”的意思，你是不是就能猜出点什么了？没错，MSM正式利用了高阶矩来估计分布</p>
<p>不知道矩的自己回去复习概率论<del>虽然我也就知道这么个名词</del></p>
<p>十分复杂所以闫大神没讲具体实现</p>
<p><del>我也不想听</del></p>
<p><del>现在也没人用</del></p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p><del>头一次上课做笔记</del></p>
<p>这是闫令琪大神在GAMES上发表的课程GAMES202-高质量实时渲染的个人笔记，有想要学习的<del>和图一乐的</del>可以参考一下</p>
<p>本次笔记覆盖到了第三讲和第四讲，real-time shadows部分</p>
<p><del>做笔记真的累死了但是为了充实blog我忍了</del></p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>命运石之门0主观评测和游玩体验</title>
    <url>/2021/05/07/%E5%91%BD%E8%BF%90%E7%9F%B3%E4%B9%8B%E9%97%A80%E4%B8%BB%E8%A7%82%E8%AF%84%E6%B5%8B%E5%92%8C%E6%B8%B8%E7%8E%A9%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="关于命运石之门0"><a href="#关于命运石之门0" class="headerlink" title="关于命运石之门0"></a>关于命运石之门0</h2><p><strong>首先开门见山，命运石之门0是一部有缺憾的作品，但对于它所做出的尝试，相对于本篇的补全，以及剧情氛围的营造来讲，我给这部作品满分，或者说不是满分，也是9.5以上</strong></p>
<p>这部作品口碑会两极分化是必然的——有人认为它伏笔收的不如本篇干净利落，也有人认为它压抑的氛围让人不能接受，对于前一个问题后面我会解释，对于第二个问题那纯粹是个人喜好而已，不多加评判</p>
<h2 id="关于伏笔"><a href="#关于伏笔" class="headerlink" title="关于伏笔"></a>关于伏笔</h2><p>好了现在开始说第一个问题，很多人觉得0的世界线错综复杂，被动的跳线让人一头雾水，结尾的伏笔又没有本篇那种干净利落的回收，因此认为0在剧情方面被本篇吊打，但实际上，我在这里先声明一个观点，<strong>命运石之门0的世界线跳跃，并不是无迹可寻的，不同的世界线之间有着千丝万缕的联系，而玩家在跳跃后不知所措一头雾水的感觉，实际上与胸针的不知所措是相对应的，并不是没有道理，只是不浮于表面罢了</strong></p>
<p>这里如果把每个线的跳跃缘由说出来那可太多了，这里根本就写不下，而且我很懒，就算了（<br>但大家一定要知道，命运石之门0的跳跃，是很值得研究的，随着研究的深入，你会发现志仓社长真的把世界线这套世界观全部的潜力发挥了出来，完美的诠释了世界线的飘忽不定以及观测者在世界线间漂流的无力感和绝望感，当然了，这与本作优秀的氛围塑造也有一定关系（因为我先玩出的be，对这种悲伤绝望的氛围可能还有更深的感触 <del>ps：助手的电话怎么可以不接啊喂！</del>）</p>
<p>但是，我刚开始就说过，这部作品是有缺憾的，<strong>缺憾是什么</strong>？例如没有认真解释的三千跳，略显赶工的红莉栖线，都是本作在叙事方面的缺憾。那么本作在其它方面就没有缺憾了吗？不是的，说了这么多，在本人深入（一点也不）的研究之后，终于要拿acg界顶级的世界观——世界线，开刀了。</p>
<h2 id="命运石之门系列（包括本篇）的逻辑漏洞"><a href="#命运石之门系列（包括本篇）的逻辑漏洞" class="headerlink" title="命运石之门系列（包括本篇）的逻辑漏洞"></a>命运石之门系列（包括本篇）的逻辑漏洞</h2><h3 id="时间跳跃机器"><a href="#时间跳跃机器" class="headerlink" title="时间跳跃机器"></a>时间跳跃机器</h3><p>首先是包括本作在内，最大的逻辑漏洞——时间跳跃机器，众所周知时间跳跃机器是将人的记忆压缩之后，时间跳跃到原来的手机上，被当事人接听后实现记忆覆盖为基础原理实现的，而这个发送到过去的过程<strong>本质上和dmail没有区别</strong><br>那为什么不是胸针使用时间跳跃机器后感受到世界线的变化，来到一个自己时间跳跃后做完一切，时间发展到此时此刻的世界线呢？</p>
<p>说白了，如果真的以一个固定的胸针为第一视角，他只会感受到世界线变动才是，并不会感受到时间跳跃。</p>
<p>那如果你每次都以跳跃之后的胸针为视角呢？那逻辑上还是解释不通</p>
<h3 id="rs所带来的记忆覆盖问题"><a href="#rs所带来的记忆覆盖问题" class="headerlink" title="rs所带来的记忆覆盖问题"></a>rs所带来的记忆覆盖问题</h3><p>如果你每次都以跳跃过后的胸针为第一视角，那么应该指出后面时间将会发生的，原世界线胸针rs后覆盖跳跃胸针记忆的事情</p>
<p>至于为什么，还是这句话，对于时间跳跃之前的胸针，<strong>时间跳跃和发送dmail没有区别</strong>，发送dmail的胸针会在发送后跳跃世界线并覆盖掉现在这条世界线上的记忆，时间跳跃机器也会</p>
<p>好，你可以说这样故事没法写，为了感情和表达效果可以对合理性做出一些妥协，可以略过甚至完全忽略每一次记忆覆盖，那拯救n次真由理未果的记忆呢？</p>
<p>完全不符合逻辑的记忆成为了剧情的重要推手，这就一定是你的逻辑漏洞了。<br>类似的漏洞其实都体现了世界线这个世界观不完善的地方，<strong>但在本篇里，不合理性并没有被完全展现出来，因为本篇限制了这套世界观的发挥</strong>。</p>
<p>在本作里，胸针仅仅以自己作为主视角，主动发生世界线跳跃，<strong>且除了sern以外世界线跳动的原因均为自己控</strong>制，从这你就能看出来实际上，这套世界观被加了不少限制。而我开头就说过，在命运石之门0里，志仓社长把世界线这套世界观全部的潜力发挥了出来。</p>
<p>那么，代价，是什么呢？</p>
<h3 id="逻辑漏洞放大带来的0篇风评不如本篇"><a href="#逻辑漏洞放大带来的0篇风评不如本篇" class="headerlink" title="逻辑漏洞放大带来的0篇风评不如本篇"></a>逻辑漏洞放大带来的0篇风评不如本篇</h3><p>自然是世界线这套世界观里所有的漏洞也一并被暴露了出来，而且很多漏洞真的困难修复（参见时间跳跃机器）所以只能搁这，而这些底层的漏洞反应到表层就是部分逻辑的错乱和剧情衔接问题。<br>但我们同时也要明白，志仓千代丸，他不是全知全能的神，世界线如果真的毫无漏洞，为什么不能成为解释世界组成的假说？志仓他手下没有顶尖的物理学家团队，不可能写出那么严谨的世界观，而世界线这套世界观它已经足够优秀了，我们也不该过分苛责。</p>
<h2 id="有逻辑漏洞是坏事，但不一定坏"><a href="#有逻辑漏洞是坏事，但不一定坏" class="headerlink" title="有逻辑漏洞是坏事，但不一定坏"></a>有逻辑漏洞是坏事，但不一定坏</h2><h3 id="我关于逻辑和剧情平衡的看法"><a href="#我关于逻辑和剧情平衡的看法" class="headerlink" title="我关于逻辑和剧情平衡的看法"></a>我关于逻辑和剧情平衡的看法</h3><p>这么说来，我们真的应该如此苛责石头门0的逻辑漏洞吗？也许你可以说石头门0如果保守一点就不会出现这么多让人费解的地方，但我个人真的非常欣赏这种将世界观发挥到极限的做法，况且，令人不知所措，对发生的事情感到费解，明明有特殊能力却完全无法解释当下的情况，不也是石头门0营造的氛围的一部分吗？</p>
<h3 id="从这方面看剧情的连结与发散"><a href="#从这方面看剧情的连结与发散" class="headerlink" title="从这方面看剧情的连结与发散"></a>从这方面看剧情的连结与发散</h3><p>我不知道是否有人玩过线性拘束的树状图，但是如果玩过的话，我个人感觉石头门0的各线有一种，te是主线，而其余线类似于树状图那种，为主线发生的一切无声的铺垫（除了be线和篝线），实际上，我个人认为25年的胸针并不一定是真由里派生te线的胸针，也有可能是红莉栖线，真帆线最终跳跃过来覆盖的胸针，这方面我不知道是留白好还是赶工好……（真以为篝线结尾星之奏单纯就是给你放个星之奏听？个人认为其它线最终都是共通的，共同将胸针修正到了te，而只有篝和be是真正的绝望，死路一条）</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>咳，扯远了，总体来说，我认为命运石之门是在galgame的限制下，做到了最好的五边形战士，而石头门0则是撞开了这些条条框框，格局更大，细节更丰富的作品，当然也让自己遍体鳞伤，总体而言我真的特别欣赏这样的石头门0</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这篇文章是我一年前在晚上2点半写的原稿的轻微修改版本，一年前那篇我发在bangumi上了，可以看见当时我急着去睡觉并没有说的很清楚<del>胡言乱语</del>，今天突然在电脑里看见了就发出来吧，充实一下我的博客，让它看起来像个博客（</p>
]]></content>
      <categories>
        <category>游戏评测</category>
      </categories>
      <tags>
        <tag>游评</tag>
        <tag>漫评</tag>
        <tag>命运石之门</tag>
      </tags>
  </entry>
  <entry>
    <title>测试用</title>
    <url>/2021/05/07/%E6%B5%8B%E8%AF%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="因为显得很厉害所以来个大标题"><a href="#因为显得很厉害所以来个大标题" class="headerlink" title="因为显得很厉害所以来个大标题"></a>因为显得很厉害所以来个大标题</h1><h2 id="再来个中的"><a href="#再来个中的" class="headerlink" title="再来个中的"></a>再来个中的</h2><h3 id="以及小的"><a href="#以及小的" class="headerlink" title="以及小的"></a>以及小的</h3><h4 id="和巨小的"><a href="#和巨小的" class="headerlink" title="和巨小的"></a>和巨小的</h4><p>这是没有的</p>
<p><del>这是划掉的</del></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
